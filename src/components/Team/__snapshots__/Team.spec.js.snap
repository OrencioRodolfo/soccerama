// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Home component fetch squad must render the entire squad 1`] = `
Array [
  <styled.div>
    <img
      alt="player"
      src="Sample"
    />
    <div
      style={
        Object {
          "textAlign": "center",
        }
      }
    >
      Sample
    </div>
  </styled.div>,
  undefined,
]
`;

exports[`Home component mapStateToProps function must return the data related to the players 1`] = `
Object {
  "players": Object {
    "1": Object {
      "height": "Sample",
      "id": 1,
      "name": "Sample",
      "photo": "Sample",
      "weight": "Sample",
    },
  },
}
`;

exports[`Home component must render properly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TeamDialog
    fullScreen={false}
    getPlayer={[Function]}
    onClose={[MockFunction]}
    open={true}
    players={
      Object {
        "1": Object {
          "height": "Sample",
          "id": 1,
          "name": "Sample",
          "photo": "Sample",
          "weight": "Sample",
        },
      }
    }
    squad={
      Array [
        Object {
          "logo": "logo",
          "name": "sample",
          "player_id": 1,
        },
        Object {
          "logo": "logo",
          "name": "sample",
          "player_id": 2,
        },
      ]
    }
    team={Object {}}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <WithStyles(Dialog)
        aria-labelledby="responsive-dialog-title"
        fullScreen={false}
        onClose={[Function]}
        onEnter={[Function]}
        open={false}
      >
        <WithStyles(DialogTitle) />
        <WithStyles(DialogContent)
          style={
            Object {
              "minWidth": "400px",
            }
          }
        >
          <styled.div>
            <img
              alt="team logo"
              src={undefined}
            />
          </styled.div>
          <styled.div>
            <WithStyles(CircularProgress) />
          </styled.div>
        </WithStyles(DialogContent)>
        <WithStyles(DialogActions)>
          <WithStyles(Button)
            autoFocus={true}
            color="primary"
            onClick={[Function]}
          >
            Dismiss
          </WithStyles(Button)>
        </WithStyles(DialogActions)>
      </WithStyles(Dialog)>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "aria-labelledby": "responsive-dialog-title",
        "children": Array [
          <WithStyles(DialogTitle) />,
          <WithStyles(DialogContent)
            style={
              Object {
                "minWidth": "400px",
              }
            }
          >
            <styled.div>
              <img
                alt="team logo"
                src={undefined}
              />
            </styled.div>
            <styled.div>
              <WithStyles(CircularProgress) />
            </styled.div>
          </WithStyles(DialogContent)>,
          <WithStyles(DialogActions)>
            <WithStyles(Button)
              autoFocus={true}
              color="primary"
              onClick={[Function]}
            >
              Dismiss
            </WithStyles(Button)>
          </WithStyles(DialogActions)>,
        ],
        "fullScreen": false,
        "onClose": [Function],
        "onEnter": [Function],
        "open": false,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <styled.div>
                <img
                  alt="team logo"
                  src={undefined}
                />
              </styled.div>,
              <styled.div>
                <WithStyles(CircularProgress) />
              </styled.div>,
            ],
            "style": Object {
              "minWidth": "400px",
            },
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <img
                  alt="team logo"
                  src={undefined}
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "alt": "team logo",
                  "src": undefined,
                },
                "ref": null,
                "rendered": null,
                "type": "img",
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <WithStyles(CircularProgress) />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(Button)
              autoFocus={true}
              color="primary"
              onClick={[Function]}
            >
              Dismiss
            </WithStyles(Button)>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "autoFocus": true,
              "children": "Dismiss",
              "color": "primary",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": "Dismiss",
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <WithStyles(Dialog)
          aria-labelledby="responsive-dialog-title"
          fullScreen={false}
          onClose={[Function]}
          onEnter={[Function]}
          open={false}
        >
          <WithStyles(DialogTitle) />
          <WithStyles(DialogContent)
            style={
              Object {
                "minWidth": "400px",
              }
            }
          >
            <styled.div>
              <img
                alt="team logo"
                src={undefined}
              />
            </styled.div>
            <styled.div>
              <WithStyles(CircularProgress) />
            </styled.div>
          </WithStyles(DialogContent)>
          <WithStyles(DialogActions)>
            <WithStyles(Button)
              autoFocus={true}
              color="primary"
              onClick={[Function]}
            >
              Dismiss
            </WithStyles(Button)>
          </WithStyles(DialogActions)>
        </WithStyles(Dialog)>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "aria-labelledby": "responsive-dialog-title",
          "children": Array [
            <WithStyles(DialogTitle) />,
            <WithStyles(DialogContent)
              style={
                Object {
                  "minWidth": "400px",
                }
              }
            >
              <styled.div>
                <img
                  alt="team logo"
                  src={undefined}
                />
              </styled.div>
              <styled.div>
                <WithStyles(CircularProgress) />
              </styled.div>
            </WithStyles(DialogContent)>,
            <WithStyles(DialogActions)>
              <WithStyles(Button)
                autoFocus={true}
                color="primary"
                onClick={[Function]}
              >
                Dismiss
              </WithStyles(Button)>
            </WithStyles(DialogActions)>,
          ],
          "fullScreen": false,
          "onClose": [Function],
          "onEnter": [Function],
          "open": false,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <styled.div>
                  <img
                    alt="team logo"
                    src={undefined}
                  />
                </styled.div>,
                <styled.div>
                  <WithStyles(CircularProgress) />
                </styled.div>,
              ],
              "style": Object {
                "minWidth": "400px",
              },
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <img
                    alt="team logo"
                    src={undefined}
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "alt": "team logo",
                    "src": undefined,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "img",
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <WithStyles(CircularProgress) />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <WithStyles(Button)
                autoFocus={true}
                color="primary"
                onClick={[Function]}
              >
                Dismiss
              </WithStyles(Button)>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "autoFocus": true,
                "children": "Dismiss",
                "color": "primary",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "Dismiss",
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`Home component render squad must render a circular progress while the squad isn't entirely loaded 1`] = `<WithStyles(CircularProgress) />`;

exports[`Home component render squad must render the entire squad 1`] = `
Array [
  <styled.div>
    <img
      alt="player"
      src="Sample"
    />
    <div
      style={
        Object {
          "textAlign": "center",
        }
      }
    >
      Sample
    </div>
  </styled.div>,
  undefined,
]
`;
